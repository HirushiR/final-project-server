// rn-infra/middleware/authGuard.mjs
import passport from "passport";

// Middleware to protect routes using JWT strategy
export function ensureAuthenticated(req, res, next) {
  // Use passport.authenticate with the 'jwt' strategy
  // Set session: false because we are NOT using sessions
  passport.authenticate("jwt", { session: false }, (err, user, info) => {
    if (err) {
      // Handle unexpected errors during verification
      console.error("[Auth Guard] JWT strategy error:", err);
      return next(err);
    }
    if (!user) {
      // Authentication failed (token invalid, expired, user not found, etc.)
      let message = "Authentication required. Invalid or missing token.";
      if (info instanceof Error) {
        message = `Authentication Error: ${info.message}`;
        console.log(`[Auth Guard] JWT authentication failed: ${info.message}`);
      } else if (info && typeof info.message === "string") {
        message = info.message; // Use message from passport-jwt (e.g., "No auth token")
        console.log(`[Auth Guard] JWT authentication failed: ${info.message}`);
      } else {
        console.log(
          `[Auth Guard] JWT authentication failed: No user returned.`
        );
      }
      return res.status(401).json({ error: message });
    }

    // Authentication successful!
    // passport-jwt strategy's verify callback already attached user to req.user
    console.log(
      `[Auth Guard] Access granted for user: ${user.username} (ID: ${user.id})`
    );
    req.user = user; // Explicitly ensure req.user is set if needed by subsequent middleware/routes
    return next(); // Proceed to the protected route
  })(req, res, next); // Important: call the middleware function generated by passport.authenticate
}

export default ensureAuthenticated; // Keep default export if used elsewhere
